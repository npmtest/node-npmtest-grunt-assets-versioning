{"/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/test.js":"/* istanbul instrument in package npmtest_grunt_assets_versioning */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/lib.npmtest_grunt_assets_versioning.js":"/* istanbul instrument in package npmtest_grunt_assets_versioning */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_assets_versioning = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_assets_versioning = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-assets-versioning && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_assets_versioning */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_assets_versioning\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_assets_versioning.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_assets_versioning.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_assets_versioning.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_assets_versioning.__dirname + '/lib.npmtest_grunt_assets_versioning.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/Gruntfile.js":"/*\n * grunt-assets-versioning\n * https://github.com/theasta/grunt-assets-versioning\n *\n * Copyright (c) 2013 Alexandrine Boissière\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  var _fileGlobSync;\n  // Project configuration.\n  grunt.initConfig({\n    jsdoc : {\n      dist : {\n        src: ['tasks/**/*.js'],\n        options: {\n          destination: 'docs',\n          configure: 'jsdoc.conf.json'\n        }\n      }\n    },\n    jshint: {\n      all: [\n        'Gruntfile.js',\n        'tasks/**/*.js',\n        '<%= nodeunit.tests %>'\n      ],\n      options: {\n        jshintrc: '.jshintrc'\n      }\n    },\n\n    // Before generating any new files, remove any previously-created files.\n    clean: {\n      tests: ['tmp']\n    },\n\n    // Configuration to be run (and then tested).\n    assets_versioning: {\n      options_tag_date: {\n        options: {\n          tag           : 'date'\n        },\n        files: {\n          'tmp/js/js_bundle_a.js': ['test/fake/file1.js', 'test/fake/file2.js'],\n          'tmp/js/js_bundle_b.js': ['test/fake/file3.js', 'test/fake/file4.js']\n        }\n      },\n      options_dateFormat: {\n        options: {\n          tag           : 'date',\n          dateFormat: 'YYMMDDHHmmss',\n          timezoneOffset: 7\n        },\n        files: {\n          'tmp/js/js_bundle_a.js': ['test/fake/file1.js', 'test/fake/file2.js'],\n          'tmp/js/js_bundle_b.js': ['test/fake/file3.js', 'test/fake/file4.js']\n        }\n      },\n      options_timezoneOffset: {\n        options: {\n          tag           : 'date',\n          timezoneOffset: 7\n        },\n        files: {\n          'tmp/js/js_bundle_a.js': ['test/fake/file1.js', 'test/fake/file2.js'],\n          'tmp/js/js_bundle_b.js': ['test/fake/file3.js', 'test/fake/file4.js']\n        }\n      },\n      options_hashLength: {\n        options: {\n          hashLength: 16\n        },\n        files: {\n          'tmp/js/options_hashlength_a.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'],\n          'tmp/js/options_hashlength_b.js': ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js']\n        }\n      },\n      options_skipExisting_true: {\n        options: {\n          skipExisting: true\n        },\n        files: {\n          'tmp/skip_existing_true.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js']\n        }\n      },\n      options_skipExisting_false: {\n        options: {\n          skipExisting: false\n        },\n        files: {\n          'tmp/skip_existing_false.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js']\n        }\n      },\n      options_skipExisting_array: {\n        options: {\n          skipExisting: ['tmp/js/skip_existing_array_1.3d04f375.js']\n        },\n        files: {\n          'tmp/js/skip_existing_array_1.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'],\n          'tmp/js/skip_existing_array_2.js': ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js']\n        }\n      },\n      options_post_external: {\n        options: {\n          post: true,\n          tasks: [\n            'concat:options_post_1',\n            'concat:options_post_2'\n          ]\n        }\n      },\n      options_post_internal: {\n        options: {\n          post: true\n        },\n        files: [\n          { src: ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'], dest: 'tmp/js/options_post_internal_a.js' },\n          { src: ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js'], dest: 'tmp/js/options_post_internal_b.js' }\n        ]\n      },\n      options_versionsMapFile: {\n        files: [{\n          expand : true,\n          cwd    : \"test/fixtures/images/\",\n          src    : ['**/*.png', '**/*.jpg', '**/*.gif'],\n          dest   : \"tmp/options_output/\"\n        }],\n        options: {\n          versionsMapFile     : 'tmp/options_output.json'\n        }\n      },\n      output_versionsMapTrimPath: {\n        files: [{\n          expand : true,\n          cwd    : \"test/fixtures/images/\",\n          src    : ['**/*.png', '**/*.jpg', '**/*.gif'],\n          dest   : \"tmp/options_output_trim/\"\n        }],\n        options: {\n          versionsMapFile     : 'tmp/options_output_trim.json',\n          versionsMapTrimPath : 'tmp/options_output_trim/'\n        }\n      },\n      options_versionsMapTemplate: {\n        files: [{\n          expand : true,\n          cwd    : \"test/fixtures/images/\",\n          src    : ['**/*.png', '**/*.jpg', '**/*.gif'],\n          dest   : \"tmp/options_versionsMapTemplate/\"\n        }],\n        options: {\n          versionsMapFile     : 'tmp/options_versionsMapTemplate.php',\n          versionsMapTemplate : 'test/fixtures/templates/php.tpl',\n          versionsMapTrimPath : 'tmp/options_versionsMapTemplate/'\n        }\n      },\n      files_compact_format: {\n        src: [\n          'test/fixtures/js/file1.js',\n          'test/fixtures/js/file2.js',\n          'test/fixtures/js/file3.js'\n        ],\n        dest: 'tmp/js/files_compact_format.js'\n      },\n      files_object_format: {\n        files: {\n          'tmp/js/files_object_format_a.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'],\n          'tmp/js/files_object_format_b.js': ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js']\n        }\n      },\n      files_array_format: {\n        files: [\n          {src: ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'], dest: 'tmp/js/files_array_format_a.js'},\n          {src: ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js'], dest: 'tmp/js/files_array_format_b.js'}\n        ]\n      },\n      files_expand_format: {\n        files: [{\n          expand : true,\n          cwd    : \"test/fixtures/images/\",\n          src    : ['**/*.png', '**/*.jpg', '**/*.gif'],\n          dest   : \"tmp/files_expand_format/\"\n        }]\n      },\n      files_expand_format_directory: {\n        files: [{\n          expand : true,\n          cwd    : \"test/fixtures/images\",\n          src    : ['**/*'],\n          dest   : \"tmp/task_files_expand_format_directory/\"\n        }]\n      },\n      task_files_compact_format: {\n        options: {\n          tasks: ['concat:task_files_compact_format']\n        }\n      },\n      task_files_object_format: {\n        options: {\n          tasks: ['concat:task_files_object_format']\n        }\n      },\n      task_files_array_format: {\n        options: {\n          tasks: ['concat:task_files_array_format']\n        }\n      },\n      task_files_expand_format: {\n        options: {\n          tasks: ['concat:task_files_expand_format']\n        }\n      },\n      multiple_tasks: {\n        options: {\n          tasks: [\n            'concat:multiple_task_1',\n            'concat:multiple_task_2',\n            'concat:multiple_task_3'\n          ]\n        }\n      },\n      files_default_behaviour: {\n        files: {\n          'tmp/js/default_a.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'],\n          'tmp/js/default_b.js': ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js']\n        }\n      },\n      fail_surrogate_already_exists: {\n        options: {\n          tasks: ['concat:fail_surrogate_already_exists']\n        }\n      },\n      fail_duplicate_destination_files: {\n        files: [\n          { src: ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'], dest: 'tmp/js/duplicate_file.js' },\n          { src: ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'], dest: 'tmp/js/duplicate_file.js' }\n        ]\n      },\n      fail_no_valid_files: {\n        'tmp/js/no_file/no_file.js': ['test/fixtures/js/file2.js']\n      },\n      fail_no_files: {},\n      fail_no_valid_external_task: {\n        options: {\n          task: ['dontexist']\n        }\n      },\n      fail_no_src: {\n        files: {\n          'tmp/js/whatever.js': ['test/fixtures/js/']\n        }\n      },\n      fail_no_dest: {\n        src: ['test/fixtures/js/file2.js']\n      },\n      fail_mix_files_task: {\n        options: {\n          tasks: ['concat:fail_mix_files_task']\n        },\n        files: {\n          'tmp/fail_mix_files_task.js':  'test/fixtures/js/file3.js'\n        }\n      },\n      fail_skipexisting_post_conflict: {\n        options: {\n          skipExisting: true,\n          post: true\n        },\n        files: {\n          'tmp/fail_skipexisting_post_conflict.js':  'test/fixtures/js/file3.js'\n        }\n      }\n    },\n\n    concat: {\n      task_files_compact_format:{\n        src: [\n          'test/fixtures/js/file1.js',\n          'test/fixtures/js/file2.js',\n          'test/fixtures/js/file3.js'\n        ],\n        dest: 'tmp/js/task_files_compact_format.js'\n      },\n      task_files_object_format: {\n        files: {\n          'tmp/js/task_files_object_format_a.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'],\n          'tmp/js/task_files_object_format_b.js': ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js']\n        }\n      },\n      task_files_array_format: {\n        files: [\n          {src: ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'], dest: 'tmp/js/task_files_array_format_a.js'},\n          {src: ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js'], dest: 'tmp/js/task_files_array_format_b.js'}\n        ]\n      },\n      multiple_task_1: {\n        files: {\n          'tmp/js/multiple_task_1_a.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'],\n          'tmp/js/multiple_task_1_b.js': ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js']\n        }\n      },\n      multiple_task_2: {\n        src: [\n          'test/fixtures/js/file1.js',\n          'test/fixtures/js/file2.js',\n          'test/fixtures/js/file3.js'\n        ],\n        dest: 'tmp/js/multiple_task_2.js'\n      },\n      multiple_task_3: {\n        files: [\n          {src: ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js'], dest: 'tmp/js/multiple_task_3_a.js'},\n          {src: ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js'], dest: 'tmp/js/multiple_task_3_b.js'}\n        ]\n      },\n      fail_surrogate_already_exists: {\n        src: [\n          'test/fixtures/js/file1.js'\n        ],\n        dest: 'tmp/js/fail_surrogate_already_exists.js'\n\n      },\n      fail_surrogate_already_exists_assets_versioning: {},\n      task_files_expand_format: {\n        files: [{\n          expand : true,\n          cwd    : \"test/fixtures/images/\",\n          src    : ['**/*.png', '**/*.jpg', '**/*.gif'],\n          dest   : \"tmp/task_files_expand_format/\"\n        }]\n      },\n      fail_mix_files_task: {},\n      options_post_1: {\n        files: {\n          'tmp/js/options_post_a.js': ['test/fixtures/js/file1.js', 'test/fixtures/js/file2.js']\n        }\n      },\n      options_post_2: {\n        files: {\n          'tmp/js/options_post_b.js': ['test/fixtures/js/file3.js', 'test/fixtures/js/file4.js']\n        }\n      }\n    },\n\n    // Unit tests.\n    nodeunit: {\n      tests: ['test/*_test.js']\n    },\n\n    watch: {\n      files: ['<%= jshint.all %>'],\n      tasks: ['jshint', 'test']\n    }\n\n  });\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks('tasks');\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-jsdoc');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  var mock = require('mock-fs');\n\n  grunt.registerTask('startMocking', function () {\n\n    mock({\n      'test/fake/': {\n        'file1.js': mock.file({\n          content: 'file content here',\n          ctime: new Date(1411609054470),\n          mtime: new Date(1411609054470) //Wed Sep 24 2014 18:37:34 GMT-0700 (PDT)\n        }),\n        'file2.js': mock.file({\n          content: 'file content here',\n          ctime: new Date(1369140245000),\n          mtime: new Date(1369140245000) //Tue May 21 2013 05:44:05 GMT-0700 (PDT)\n        }),\n        'file3.js': mock.file({\n          content: 'file content here',\n          ctime: new Date(1328091453000),\n          mtime: new Date(1328091453000) //Wed Feb 01 2012 02:17:33 GMT-0800 (PST)\n        }),\n        'file4.js': mock.file({\n          content: 'file content here',\n          ctime: new Date(1388563200000),\n          mtime: new Date(1388563200000) //Wed Jan 01 2014 00:00:00 GMT-0800 (PST)\n        })\n      }\n    });\n\n    // grunt is using glob that is using graceful-fs.\n    // It also needs to be mocked\n    _fileGlobSync = grunt.file.glob.sync;\n    grunt.file.glob.sync = function (pattern, options) {\n      if (/^test\\/fake\\/.*/.test(pattern)) {\n        return pattern;\n      } else {\n        return _fileGlobSync(pattern, options);\n      }\n    };\n  });\n\n  grunt.registerTask('stopMocking', function () {\n    mock.restore();\n    grunt.file.glob.sync = _fileGlobSync;\n  });\n\n  grunt.registerTask('prepareSkipExistingTest', function () {\n    grunt.file.copy('test/expected/js/skip.js', 'tmp/skip_existing_true.3d04f375.js');\n    grunt.file.copy('test/expected/js/skip.js', 'tmp/skip_existing_false.3d04f375.js');\n    grunt.file.copy('test/expected/js/skip.js', 'tmp/js/skip_existing_array_1.3d04f375.js');\n    grunt.file.copy('test/expected/js/skip.js', 'tmp/js/skip_existing_array_2.bfcf287e.js');\n  });\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask('test', [\n    'clean',\n    'startMocking',\n    'assets_versioning:options_tag_date',\n    'assets_versioning:options_dateFormat',\n    'assets_versioning:options_timezoneOffset',\n    'stopMocking',\n    'assets_versioning:options_hashLength',\n    'prepareSkipExistingTest',\n    'assets_versioning:options_skipExisting_true',\n    'assets_versioning:options_skipExisting_false',\n    'assets_versioning:options_skipExisting_array',\n    'assets_versioning:options_post_external',\n    'assets_versioning:options_post_internal',\n    'assets_versioning:options_versionsMapFile',\n    'assets_versioning:output_versionsMapTrimPath',\n    'assets_versioning:options_versionsMapTemplate',\n    'assets_versioning:files_compact_format',\n    'assets_versioning:files_object_format',\n    'assets_versioning:files_array_format',\n    'assets_versioning:files_expand_format',\n    'assets_versioning:files_expand_format_directory',\n    'assets_versioning:task_files_compact_format',\n    'assets_versioning:task_files_object_format',\n    'assets_versioning:task_files_array_format',\n    'assets_versioning:task_files_expand_format',\n    'assets_versioning:multiple_tasks',\n    'assets_versioning:files_default_behaviour',\n    'nodeunit'\n  ]);\n\n  grunt.registerTask('fail', [\n    'assets_versioning:fail_no_src',\n    'assets_versioning:fail_no_dest',\n    'assets_versioning:fail_no_files',\n    'assets_versioning:fail_no_valid_files',\n    'assets_versioning:fail_mix_files_task',\n    'assets_versioning:fail_surrogate_already_exists',\n    'assets_versioning:fail_duplicate_destination_files',\n    'assets_versioning:fail_no_valid_external_task',\n    'assets_versioning:fail_skipexisting_post_conflict'\n  ]);\n\n  // By default, lint and run all tests.\n  grunt.registerTask('default', ['jshint', 'test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/helpers/inherit.js":"/** @module helpers/inherit */\n\nvar _ = require(\"lodash\");\n\nmodule.exports = function (Parent, protoObj) {\n  \"use strict\";\n  var Child = function () {\n    return Parent.apply(this, arguments);\n  };\n  var F = function(){};\n  F.prototype = Parent.prototype;\n  Child.prototype = new F();\n  Child.prototype.constructor = Child;\n\n  if (protoObj) {\n    _.extend(Child.prototype, protoObj);\n  }\n\n  return Child;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/helpers/task.js":"/**\n * @module helpers/Task\n */\n\nvar grunt = require('grunt');\nvar surrogateSuffix = '_assets_versioning';\nvar postSuffix = '_post_assets_versioning';\n\n/**\n * Create a task instance\n * @param {string} taskName\n * @param {Array} [taskFiles]\n * @constructor\n */\nvar Task = function (taskName, taskFiles) {\n  grunt.log.writeln(\"Versioning files from \" + taskName + \" task.\");\n  this.taskName = taskName;\n\n  this.taskConfig = this.getTaskConfig();\n\n  if (!this.taskConfig) {\n    grunt.fail.warn(\"Task '\" + this.taskName + \"' doesn't exist or doesn't have any configuration.\", 1);\n  }\n\n  this.taskFiles = taskFiles || this.getFiles();\n  if (!this.taskFiles || this.taskFiles.length === 0) {\n    grunt.fail.warn(\"Task '\" + this.taskName + \"' doesn't have any src-dest file mappings.\", 1);\n  }\n\n};\n\n/**\n * Get the task configuration\n * @returns {Object}\n */\nTask.prototype.getTaskConfig = function () {\n  return grunt.config(this.getTaskConfigKey());\n};\n\n/**\n * Get the task configuration key\n * @returns {string}\n */\nTask.prototype.getTaskConfigKey = function (taskName) {\n  taskName = taskName || this.taskName;\n  return taskName.replace(':', '.');\n};\n\n/**\n * Get the target task grunt files configuration\n * @returns {Array}\n */\nTask.prototype.getFiles = function () {\n  return grunt.task.normalizeMultiTaskFiles(this.taskConfig);\n};\n\n/**\n *\n * @param {Array} filesObj\n * @returns {string}\n */\nTask.prototype.createSurrogate = function (filesObj) {\n  var surrogateTask = this.taskName + surrogateSuffix;\n  var surrogateTaskConfigKey = this.getTaskConfigKey(surrogateTask);\n\n  if (grunt.config(surrogateTaskConfigKey)) {\n    grunt.fail.warn(\"Task '\" + surrogateTask + \"' already exists!\");\n  }\n\n  var surrogateTaskConfig = this.taskConfig;\n  // remove src & dest keys as they take precedence over the files key\n  delete surrogateTaskConfig.src;\n  delete surrogateTaskConfig.dest;\n  surrogateTaskConfig.files = filesObj;\n\n  grunt.config.set(surrogateTaskConfigKey, surrogateTaskConfig);\n  grunt.log.debug(\"Created surrogateTask '\" + surrogateTaskConfigKey + \"'\");\n  grunt.log.debug(\"Surrogate Task config: \" + JSON.stringify(surrogateTaskConfig));\n\n  return surrogateTask;\n};\n\n/**\n *\n * @param {Array} filesObj\n * @returns {string}\n */\nTask.prototype.createPostVersioningTask = function (filesObj) {\n  var postTask = this.taskName + postSuffix;\n  var taskConfigKey = this.getTaskConfigKey(postTask);\n\n  if (grunt.config(taskConfigKey)) {\n    grunt.fail.warn(\"Task '\" + postTask + \"' already exists!\");\n  }\n\n  var postTaskConfig = this.taskConfig;\n  // remove src & dest keys as they take precedence over the files key\n  delete postTaskConfig.src;\n  delete postTaskConfig.dest;\n  postTaskConfig.options = postTaskConfig.options || {};\n  postTaskConfig.options.post = false;\n  postTaskConfig.options.tasks = false;\n  postTaskConfig.isPostVersioningTaskFor = this.getTaskConfigKey();\n  postTaskConfig.files = filesObj;\n\n  grunt.config.set(taskConfigKey, postTaskConfig);\n  grunt.log.debug(\"Created Post Versioning Task '\" + taskConfigKey + \"'\");\n  grunt.log.debug(\"Post Versioning Task config: \" + JSON.stringify(postTaskConfig));\n\n  return this.taskName + postSuffix;\n};\n\n\nmodule.exports = Task;\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/taggers/date.js":"/**\n * @module taggers/date\n */\n\nvar fs = require('fs');\nvar moment = require('moment');\n\n/**\n * Date Tagger\n * @param {Array} src - Array of files\n * @param {Object} options\n * @param {string} options.dateFormat - Date format (YYYYMMDDHHmmss)\n * @returns {string}\n */\nmodule.exports = function (src, options) {\n\n  var lastMtime = src.map(function(filepath){\n    return +fs.statSync(filepath).mtime;\n  }).sort().pop();\n  return moment(lastMtime).utcOffset(-options.timezoneOffset).format(options.dateFormat);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/taggers/hash.js":"/**\n * @module taggers/hash\n */\n\nvar crypto = require('crypto');\nvar fs = require('fs');\n\n/**\n * Hash tagger\n * @param {Array} src - Array of files\n * @param {Object} options\n * @param {string} options.encoding - File encoding ('uf8')\n * @param {number} options.hashLength - Hash marker length\n * @returns {string}\n */\nmodule.exports = function (src, options) {\n  var hash = '';\n\n  src.forEach(function(f){\n    hash += crypto.createHash('md5').update(fs.readFileSync(f, options.encoding)).digest('hex');\n  });\n  if (src.length > 1){\n    hash = crypto.createHash('md5').update(hash).digest('hex');\n  }\n  var hashLength = parseInt(options.hashLength, 10);\n\n  // can't use typeof since typeof NaN == 'number'\n  if (Object.prototype.toString.call(hashLength) === '[object Number]') {\n    hash = hash.substr(0, options.hashLength);\n  }\n\n  return hash;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/versioners/abstractVersioner.js":"/**\n * @module versioners/AbstractVersioner\n */\n\nvar grunt = require('grunt');\nvar taggers = require('../taggers');\nvar _ = require('lodash');\nvar TaskClass = require('../helpers/task');\nvar slash = require('slash');\n\n/**\n * A grunt files configuration object\n * @typedef {{src: Array, dest: string}} filesConfigurationObject\n */\n\n/**\n * A surrogate task - task with destination files tagged with a revision marker\n * @typedef {(string|{files: Array})} surrogateTask\n */\n\n/**\n * Abstract Versioner\n * @constructor\n * @alias module:versioners/AbstractVersioner\n * @param {object} options - Grunt options\n * @param {object} taskData - Grunt Assets Versioning Task Object\n */\nfunction AbstractVersioner(options, taskData) {\n  this.options = options;\n  this.taskData = taskData;\n\n  /**\n   * Map of versioned files\n   * @type {Array.<{version, originalPath: string, versionedPath: string}>}\n   */\n  this.versionsMap = [];\n\n  /**\n   * Get one of the tagger functions: hash or date\n   * @type {function}\n   */\n  this.versionTagger = taggers[this.options.tag];\n\n  // is task a post versioning task?\n  this.isPostVersioningTask = grunt.config(this.getAssetsVersioningTaskConfigKey() + '.isPostVersioningTaskFor');\n}\n\n/**\n * Initiliaze the task\n * @abstract\n */\nAbstractVersioner.prototype.initialize = function () {};\n\n/**\n * Set the property surrogateTasks\n */\nAbstractVersioner.prototype.setSurrogateTasks = function () {\n  if (this.options.post) {\n    grunt.log.debug(\"Post-Versioning Mode\");\n    this.surrogateTasks = this.getPostVersioningSurrogateTasks();\n  } else {\n    grunt.log.debug(\"Pre-Versioning Mode\");\n    this.surrogateTasks = this.getPreVersioningSurrogateTasks();\n  }\n};\n\n/**\n * Create or gather all Surrogate Tasks for the post versioning mode\n * @abstract\n */\nAbstractVersioner.prototype.getPostVersioningSurrogateTasks = function () {\n  throw new Error('Should be implemented by the subclass');\n};\n\n/**\n * Create or gather all surrogate tasks for the pre versioning mode\n * @returns {Array} Array of tasks names\n */\nAbstractVersioner.prototype.getPreVersioningSurrogateTasks = function () {\n  return this.getTargetTasks().map(this.createPreVersioningSurrogateTask.bind(this));\n};\n\n/**\n * Create the Post Versioning Task\n * @returns {string}\n */\nAbstractVersioner.prototype.createPostVersioningTask = function () {\n  var intermediateDestFiles = _.flatten(this.getTargetTasks().map(this.retrieveDestFiles.bind(this)));\n  grunt.log.debug(\"Retrieved all destination files: \" + intermediateDestFiles.join(', '));\n  var filesArray = intermediateDestFiles.map(function (destFile) {\n    return {src: [destFile], dest: destFile};\n  });\n  var task = new TaskClass(this.getAssetsVersioningTaskName(), filesArray);\n  return task.createPostVersioningTask(filesArray);\n};\n\n/**\n * Get the assets versioning task name (for example assets_versioning:mytask)\n * @returns {string}\n */\nAbstractVersioner.prototype.getAssetsVersioningTaskName = function () {\n  return this.taskData.name + ':' + this.taskData.target;\n};\n\n/**\n * Get the assets versioning task configuration key (for example assets_versioning.mytask)\n * @returns {string}\n */\nAbstractVersioner.prototype.getAssetsVersioningTaskConfigKey = function () {\n  return this.taskData.name + '.' + this.taskData.target;\n};\n\n/**\n * Check if task files are valid\n * @param filesObj\n * @param filesMapIndex\n * @param filesMapLength\n * @returns {*}\n */\nAbstractVersioner.prototype.checkFilesObjValidity = function (filesObj, filesMapIndex, filesMapLength) {\n  grunt.log.debug(\"Iterating through file mapping - \" + ( filesMapIndex + 1 ) + \"/\" + filesMapLength);\n\n  var src = filesObj.src.filter(function (file) {\n    return grunt.file.isFile(file);\n  });\n\n  grunt.log.debug('Source files: ', src);\n  if (src.length === 0) {\n    grunt.log.debug(JSON.stringify(filesObj.orig));\n    return false;\n  }\n\n  if (typeof filesObj.dest !== 'string') {\n    grunt.log.debug(JSON.stringify(filesObj.orig));\n    return false;\n  }\n\n  return src;\n};\n\n/**\n * Retrieve all destination files\n * @param task\n * @returns {Array}\n */\nAbstractVersioner.prototype.retrieveDestFiles = function (task) {\n  var destFiles = [];\n  var filesMapLength = task.taskFiles.length;\n  task.taskFiles.forEach(function(f, index) {\n    if (!this.checkFilesObjValidity(f, index, filesMapLength)) { return false; }\n    destFiles.push(f.dest);\n  }.bind(this));\n  if (destFiles.length === 0) {\n    grunt.fail.warn(\"Task '\" + task.taskName + \"' has no destination files!\");\n  }\n  return destFiles;\n};\n\n/**\n * Create a Pre Versioning Surrogate Task by deducing the versioned name of its destination files and creating a surrogate task\n * @returns {Array.<surrogateTask>} - Array of surrogate tasks objects\n */\nAbstractVersioner.prototype.createPreVersioningSurrogateTask = function (task) {\n\n  var updatedTaskFiles = [];\n  var allVersionedPath = [];\n\n  var filesMapLength = task.taskFiles.length;\n  var filesMapSkipCount = 0;\n  task.taskFiles.forEach(function(taskFilesObj, index) {\n    var src = this.checkFilesObjValidity(taskFilesObj, index, filesMapLength);\n    if (!src) {\n      filesMapSkipCount++;\n      return false;\n    }\n\n    var version = this.versionTagger(src, this.options);\n    grunt.log.debug('Version tag (' + this.options.tag + '): ' + version);\n\n    if (version === '') {\n      grunt.fail.warn(\"Failed at generating a version tag for \" + taskFilesObj.dest, 1);\n      return false;\n    }\n\n    var destFilePath = this.options.versionize.call(this, taskFilesObj.dest, version);\n    grunt.log.debug('Destination filename: ' + destFilePath);\n\n    // push to the map of versions\n\n    var versionedPath = destFilePath.replace(this.options.versionsMapTrimPath, '');\n    if (_.contains(allVersionedPath, versionedPath)) {\n      grunt.fail.warn(\"Duplicate versioned path detected: '\" + versionedPath +\"'.\");\n    } else {\n      allVersionedPath.push(versionedPath);\n      this.versionsMap.push({\n        version: version,\n        originalPath: taskFilesObj.dest.replace(this.options.versionsMapTrimPath, ''),\n        versionedPath: slash(versionedPath)\n      });\n    }\n\n    // check if file already exists\n    if (this.options.skipExisting === true) {\n      grunt.log.debug('options.skipExisting is true, checking if destination file already exists.');\n      if (grunt.file.exists(destFilePath)) {\n        grunt.log.debug('Destination file already exists. Task skipped.');\n        return false;\n      }\n      grunt.log.debug(\"Destination file doesn't exist. Task will be processed.\");\n    } else if (Array.isArray(this.options.skipExisting)) {\n      if (this.options.skipExisting.indexOf(destFilePath) !== -1) {\n        grunt.log.debug('Destination file listed in options.skipExisting. Task skipped');\n        return false;\n      }\n      grunt.log.debug(\"Destination file not list in options.skipExisting. Task will be processed.\");\n    }\n\n    // log the src and dest data\n    updatedTaskFiles.push({ src: src, dest: destFilePath });\n\n  }.bind(this));\n\n  if (filesMapSkipCount === filesMapLength) {\n    grunt.fail.warn(\"File configuration for Task '\" + task.taskName + \"' is incorrect. Missing valid source files and/or destination files!\");\n  }\n\n  grunt.log.debug(\"Versioned Files Object: \", updatedTaskFiles);\n\n  return this.createSurrogateTask(updatedTaskFiles, task);\n};\n\n/**\n * Save the versions map to a grunt configuration variable\n * and also optionally to a file\n */\nAbstractVersioner.prototype.saveVersionsMap = function () {\n  if (this.options.post) { return; }\n  if (typeof this.options.versionsMapFile === \"string\") {\n    var versionsMapContent;\n\n    // Are we generating a json file or are we using a template file?\n    var templateFile = this.options.versionsMapTemplate;\n    if (typeof templateFile === \"string\") {\n      if (!grunt.file.exists(templateFile)) {\n\n      }\n      var template = grunt.util.normalizelf(grunt.file.read(templateFile, 'utf8'));\n      versionsMapContent = grunt.template.process(template, {\n        data: {\n          files: this.versionsMap\n        }\n      }).replace(/[\\n]{2}/g,\"\\n\");\n    } else {\n      versionsMapContent = JSON.stringify(this.versionsMap);\n    }\n    grunt.file.write(this.options.versionsMapFile, versionsMapContent);\n  }\n\n  grunt.config.set(this.getAssetsVersioningTaskConfigKey() + '.versionsMap', this.versionsMap);\n  //var originalTask = grunt.config(this.getAssetsVersioningTaskConfigKey() + '.isPostVersioningTaskFor');\n  //if (typeof originalTask === 'string') {\n  //  grunt.config.set(originalTask + '.versionsMap', this.versionsMap);\n  //}\n\n  if (typeof this.isPostVersioningTask  === 'string') {\n    grunt.config.set(this.isPostVersioningTask + '.versionsMap', this.versionsMap);\n  }\n\n  grunt.log.debug(\"Versions Map: \", this.versionsMap);\n};\n\n/* ---- ABSTRACT METHODS ---- */\n\n\n\n/**\n * Get target tasks instances\n * @abstract\n * @returns {TaskClass}\n */\nAbstractVersioner.prototype.getTargetTasks = function () {\n  throw new Error('Should be implemented by the subclass');\n};\n\n/**\n * Create a surrogate task\n * @abstract\n */\nAbstractVersioner.prototype.createSurrogateTask = function () {\n  throw new Error('Should be implemented by the subclass');\n};\n\n/**\n * Run the target task\n * @abstract\n */\nAbstractVersioner.prototype.doVersion = function () {\n  throw new Error('Should be implemented by the subclass');\n};\n\nmodule.exports = AbstractVersioner;\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/taggers/index.js":"module.exports = {\n  date: require('./date'),\n  hash: require('./hash')\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/versioners/externalVersioner.js":"/**\n * @module versioners/ExternalVersioner\n */\n\nvar TaskClass = require('../helpers/task');\nvar AbstractVersioner = require('./abstractVersioner');\nvar inherit = require('../helpers/inherit');\nvar grunt = require('grunt');\nvar _ = require('lodash');\n\n/**\n * External Task Versioner\n * @constructor\n * @alias module:versioners/ExternalVersioner\n * @augments module:versioners/AbstractVersioner\n */\nvar ExternalVersioner = inherit(AbstractVersioner);\n\n/**\n * Initialization function run by the constructor\n */\nExternalVersioner.prototype.initialize = function () {\n  // display a warning if both assets versioning and target tasks have a file configuration object\n  if (this.taskData.data.files != null) {\n    grunt.log.error(\"Files passed to '\" + this.getAssetsVersioningTaskName() + \"' won't be versioned.\");\n  }\n\n  this.setSurrogateTasks();\n};\n\n/**\n * get Post Versioning Tasks\n * @returns {*}\n */\nExternalVersioner.prototype.getPostVersioningSurrogateTasks = function () {\n  return this.options.tasks.concat([this.createPostVersioningTask()]);\n};\n\n/**\n * Get the target task full name\n * @returns {Array.<Task>}\n */\nExternalVersioner.prototype.getTargetTasks = function () {\n  return this.options.tasks.map(function (taskName) {\n    return new TaskClass(taskName);\n  });\n};\n\n/**\n * Do the actual versioning\n */\nExternalVersioner.prototype.doVersion = function () {\n  if (this.options.runTask) {\n    grunt.verbose.writeln(\"Tasks triggered: '\" + this.surrogateTasks.join(\", \") + \"'\");\n    grunt.task.run(this.surrogateTasks);\n    this.saveVersionsMap();\n  }\n};\n\n/**\n * Create a surrogate task\n * @param {Array} updatedTaskFiles\n * @param task\n * @returns {surrogateTask}\n */\nExternalVersioner.prototype.createSurrogateTask = function (updatedTaskFiles, task) {\n  return task.createSurrogate(updatedTaskFiles);\n};\n\nmodule.exports = ExternalVersioner;\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/versioners/internalVersioner.js":"/**\n * @module versioners/InternalVersioner\n */\n\nvar TaskClass = require('../helpers/task');\nvar AbstractVersioner = require('./abstractVersioner');\nvar inherit = require('../helpers/inherit');\nvar grunt = require('grunt');\n\n/**\n * Internal Task Versioner\n * @constructor\n * @alias module:versioners/InternalVersioner\n * @augments module:versioners/AbstractVersioner\n */\nvar InternalVersioner = inherit(AbstractVersioner, {});\n\nInternalVersioner.prototype.initialize = function () {\n  // if internal task is a post versioning internal task\n  //this.isPostVersioningTask = grunt.config(this.getAssetsVersioningTaskConfigKey() + '.isPostVersioningTaskFor');\n  this.setSurrogateTasks();\n};\n\nInternalVersioner.prototype.getPostVersioningSurrogateTasks = function () {\n  return [this.createPostVersioningTask()];\n};\n\n/**\n * Get target tasks instances\n * @returns {Array.<Task>}\n */\nInternalVersioner.prototype.getTargetTasks = function () {\n  return [new TaskClass(this.getAssetsVersioningTaskName(), this.taskData.files)];\n};\n\n/**\n * Create a surrogate task\n * @param {Array} updatedTaskFiles\n * @returns {surrogateTask}\n */\nInternalVersioner.prototype.createSurrogateTask = function (updatedTaskFiles) {\n  return { files: updatedTaskFiles };\n};\n\n/**\n * Copy or concat files\n * @param files\n * @private\n */\nInternalVersioner.prototype._copyOrConcat = function (files) {\n  files.forEach(function (filesObj)  {\n    // if only one file, copy it\n    // otherwise concatenate the content\n    if (filesObj.src.length === 1) {\n      grunt.file.copy(filesObj.src[0], filesObj.dest);\n      if (this.isPostVersioningTask) {\n        grunt.file.delete(filesObj.src[0]);\n        grunt.log.debug(\"Deleted intermediate destination file: \" + filesObj.src[0]);\n      }\n    } else {\n      var content = filesObj.src.map(function (filepath) {\n        return grunt.file.read(filepath);\n      }).join(grunt.util.linefeed);\n\n      grunt.file.write(filesObj.dest, content);\n    }\n\n    grunt.log.writeln('File ' + filesObj.dest + ' created.');\n\n  }, this);\n};\n\nInternalVersioner.prototype.doVersion = function () {\n  this.saveVersionsMap();\n\n  if (this.surrogateTasks.length !== 1) {\n    grunt.log.error('There should be only one surrogate task in internal mode.');\n  }\n\n  if (this.options.post) {\n    this._copyOrConcat(this.getTargetTasks()[0].taskFiles);\n    grunt.task.run(this.surrogateTasks);\n  } else {\n    this._copyOrConcat(this.surrogateTasks[0].files);\n  }\n\n};\n\nmodule.exports = InternalVersioner;\n","/home/travis/build/npmtest/node-npmtest-grunt-assets-versioning/node_modules/grunt-assets-versioning/tasks/versioners/versionerFactory.js":"/**\n * @module versioners/versionerFactory\n */\n\nvar grunt = require('grunt');\nvar InternalVersioner = require('./internalVersioner');\nvar ExternalVersioner = require('./externalVersioner');\n\n/**\n * Create a concrete Versioner instance\n * @param {Object} options\n * @param {Array.<string>} [options.tasks] - Array of tasks to run and version\n * @param {Object} taskData\n * @returns {module:versioners/AbstractVersioner}\n */\nmodule.exports = function (options, taskData) {\n  \"use strict\";\n  var Versioner;\n\n  // Is the current task trying to version files from another task or not?\n  if (Array.isArray(options.tasks)) {\n    grunt.log.debug('External Task Mode');\n    Versioner = ExternalVersioner;\n  } else {\n    grunt.log.debug('Internal Task Mode');\n    if (options.tasks) {\n      grunt.log.warn(\"'tasks' option ignored: it can only be an array!\");\n    }\n    Versioner = InternalVersioner;\n  }\n\n  return new Versioner(options, taskData);\n};\n"}